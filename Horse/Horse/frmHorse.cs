using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using Microsoft.Win32;
using System.Diagnostics;


namespace Horse
{
	public partial class frmHorse : Form
	{
		#region image data
		static readonly byte[] horsedata1 = new byte[]
				 {  
					 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
					0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
					0x00,0x00,0x00,0x00,0x76,0x00,0x00,0x00,
					0x00,0x00,0x00,0x01,0x9B,0x80,0x00,0x00,
					0x00,0x00,0x00,0x01,0x7F,0xC0,0x00,0x00,
					0x00,0x00,0x00,0x06,0xF7,0x20,0x00,0x00,
					0x00,0x00,0x00,0x0F,0xE7,0x88,0x00,0x00,
					0x00,0x00,0x00,0x3B,0x87,0xC4,0x00,0x00,
					0x00,0x00,0x00,0x0F,0x0E,0xCC,0x00,0x00,
					0x00,0x03,0xFF,0xFE,0x3C,0x30,0x00,0x00,
					0x03,0xFC,0x1F,0xC0,0x7C,0x00,0x00,0x00,
					0x0E,0xBC,0x00,0x00,0x0C,0x00,0x00,0x00,
					0x1D,0x0E,0x18,0x00,0x08,0x00,0x00,0x00,
					0x05,0x0B,0x1F,0x00,0x08,0x00,0x00,0x00,
					0x00,0x0B,0x9D,0xF0,0x38,0x00,0x00,0x00,
					0x00,0x0F,0xCF,0xFC,0x70,0x00,0x00,0x00,
					0x00,0x05,0xDF,0xBF,0xF8,0x00,0x00,0x00,
					0x00,0x7E,0xF3,0xDF,0xFE,0x00,0x00,0x00,
					0x00,0x7F,0xE0,0x7F,0x8E,0x00,0x00,0x00,
					0x00,0x61,0xC0,0x03,0xFC,0x00,0x00,0x00,
					0x00,0x63,0xC0,0x03,0xF8,0x00,0x00,0x00,
					0x00,0x67,0x80,0x01,0x80,0x00,0x00,0x00,
					0x00,0x63,0x80,0x01,0x80,0x00,0x00,0x00,
					0x01,0xC1,0xC0,0x01,0x80,0x00,0x00,0x00,
					0x01,0x80,0xE0,0x01,0xC0,0x00,0x00,0x00,
					0x00,0x00,0x70,0x01,0xE0,0x00,0x00,0x00,
					0x00,0x00,0x18,0x00,0x30,0x00,0x00,0x00,
					0x00,0x00,0x1C,0x00,0x38,0x00,0x00,0x00
				 };
		static readonly byte[] horsedata2 = new byte[]
				   {0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x08,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x0C,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x01,0xBE,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x05,0x79,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x08,0xF8,0x80, 0x00, 0x00,
	0x00,0x00,0x00,0x3B,0xFC,0x20, 0x00, 0x00,
	0x00,0x00,0x00,0x57,0xBF,0xD0, 0x00, 0x00,
	0x00,0x00,0x00,0xFF,0xBB,0x90, 0x00, 0x00,
	0x00,0x07,0xFF,0x01,0xB8,0xC0, 0x00, 0x00,
	0x03,0xFC,0x20,0x00,0x30,0x00, 0x00, 0x00,
	0x07,0xD0,0x20,0x00,0x10,0x00, 0x00, 0x00,
	0x0F,0x97,0x6C,0x04,0x10,0x00, 0x00, 0x00,
	0x1D,0x1F,0xFF,0x1C,0x10,0x00, 0x00, 0x00,
	0x00,0x1F,0xFF,0xFC,0x30,0x00, 0x00, 0x00,
	0x00,0x0F,0xFF,0xB8,0xF0,0x00, 0x00, 0x00,
	0x00,0x0F,0xFF,0xF8,0x1C,0x00, 0x00, 0x00,
	0x00,0x0F,0x8F,0xFF,0xFE,0x00, 0x00, 0x00,
	0x00,0x3E,0x00,0x1F,0x06,0x00, 0x00, 0x00,
	0x00,0x3C,0x00,0x3C,0x0C,0x00, 0x00, 0x00,
	0x00,0x38,0x00,0x30,0x38,0x00, 0x00, 0x00,
	0x00,0xEC,0x00,0x70,0x30,0x00, 0x00, 0x00,
	0x00,0xCC,0x00,0x60,0x00,0x00, 0x00, 0x00,
	0x00,0xC6,0x00,0xC0,0x00,0x00, 0x00, 0x00,
	0x00,0xDC,0x01,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0xD8,0x01,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0xC0,0x01,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x60,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x70,0x00,0x00,0x00,0x00, 0x00, 0x00,
				   };

		static readonly byte[] horsedata3 = new byte[]
   {0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x02,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x03,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x3E,0x80, 0x00, 0x00,
	0x00,0x00,0x00,0x01,0xEF,0xC0, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0xDF,0x20, 0x00, 0x00,
	0x00,0x00,0x00,0x3F,0x7F,0x10, 0x00, 0x00,
	0x00,0x00,0x00,0x17,0xF7,0xC4, 0x00, 0x00,
	0x00,0x00,0x00,0xFF,0xEE,0x6C, 0x00, 0x00,
	0x00,0x03,0xFF,0x80,0xFC,0x30, 0x00, 0x00,
	0x03,0xFC,0x18,0x00,0x14,0x00, 0x00, 0x00,
	0x0F,0xC8,0x30,0x00,0x08,0x00, 0x00, 0x00,
	0x3F,0x0C,0x7C,0x38,0x18,0x00, 0x00, 0x00,
	0x0A,0x1F,0x38,0x7E,0x10,0x00, 0x00, 0x00,
	0x00,0x1F,0xFF,0xFF,0x10,0x00, 0x00, 0x00,
	0x00,0x1F,0xBF,0xFE,0x38,0x00, 0x00, 0x00,
	0x00,0x1F,0xE0,0xFE,0x07,0x80, 0x00, 0x00,
	0x00,0x3D,0xE0,0x07,0xFF,0xC0, 0x00, 0x00,
	0x00,0x79,0xC0,0x07,0x00,0xC0, 0x00, 0x00,
	0x00,0xF3,0x80,0x0E,0x00,0xC0, 0x00, 0x00,
	0x01,0xC3,0x00,0x0C,0x00,0xC0, 0x00, 0x00,
	0x03,0x01,0x80,0x18,0x00,0xC0, 0x00, 0x00,
	0x06,0x00,0x60,0x70,0x00,0x80, 0x00, 0x00,
	0x0C,0x00,0x33,0xC0,0x01,0x00, 0x00, 0x00,
	0x18,0x00,0x3E,0x00,0x00,0x00, 0x00, 0x00,
	0x18,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x38,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x18,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
   };
		static readonly byte[] horsedata4 = new byte[]
   {0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x06,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x76,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x9B,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x7F,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0xF7,0x80, 0x00, 0x00,
	0x00,0x00,0x00,0x01,0xE7,0x20, 0x00, 0x00,
	0x00,0x00,0x00,0x01,0x7F,0x08, 0x00, 0x00,
	0x00,0x00,0x00,0x0B,0xFF,0xFC, 0x00, 0x00,
	0x00,0x03,0xFC,0x1D,0xFE,0xCC, 0x00, 0x00,
	0x03,0xFF,0x7F,0xE0,0x7A,0x20, 0x00, 0x00,
	0x07,0xCC,0x10,0x00,0x1E,0x00, 0x00, 0x00,
	0x0A,0x8D,0xEF,0x0C,0x0C,0x00, 0x00, 0x00,
	0x00,0x0F,0x3F,0x8E,0x04,0x00, 0x00, 0x00,
	0x00,0x0E,0x6F,0xDC,0x44,0x00, 0x00, 0x00,
	0x00,0x0D,0x9F,0xFC,0x7C,0x00, 0x00, 0x00,
	0x00,0x0F,0x7F,0xFF,0xC4,0x00, 0x00, 0x00,
	0x00,0x0F,0xF8,0x3F,0xF3,0x00, 0x00, 0x00,
	0x00,0x3F,0x38,0x01,0xFF,0x80, 0x00, 0x00,
	0x00,0xF8,0x18,0x01,0xC7,0xC0, 0x00, 0x00,
	0x00,0xE0,0x18,0x00,0xC0,0xC0, 0x00, 0x00,
	0x01,0x80,0x38,0x70,0xC0,0x60, 0x00, 0x00,
	0x03,0x00,0x1C,0x3F,0xC0,0x30, 0x00, 0x00,
	0x76,0x00,0x06,0x00,0x00,0x18, 0x00, 0x00,
	0x3C,0x00,0x01,0x80,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0xC0,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0xC0,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
   };
		static readonly byte[] horsedata5 = new byte[]
   {0x00,0x00,0x00,0x00,0x30,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x38,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0xFE,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x06,0x1F,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x0F,0xE3,0x80, 0x00, 0x00,
	0x00,0x00,0x00,0x1E,0xFF,0x20, 0x00, 0x00,
	0x00,0x00,0x00,0x1C,0xFD,0x90, 0x00, 0x00,
	0x00,0x00,0x00,0x3D,0xFF,0xE8, 0x00, 0x00,
	0x00,0x03,0xFF,0xFF,0xFC,0xD8, 0x00, 0x00,
	0x01,0xFF,0x7C,0x3F,0x1C,0x40, 0x00, 0x00,
	0x03,0xE8,0x50,0x0C,0x38,0x00, 0x00, 0x00,
	0x07,0x4E,0x18,0x00,0x38,0x00, 0x00, 0x00,
	0x0D,0x8E,0x3C,0x00,0x18,0x00, 0x00, 0x00,
	0x00,0x0F,0xF7,0x00,0x10,0x00, 0x00, 0x00,
	0x00,0x07,0xEF,0xF1,0xD0,0x00, 0x00, 0x00,
	0x00,0x0F,0x9F,0x04,0x70,0x00, 0x00, 0x00,
	0x00,0x3C,0x70,0xFF,0x30,0x00, 0x00, 0x00,
	0x00,0xFF,0xF0,0x01,0xF0,0x00, 0x00, 0x00,
	0x01,0xF0,0x70,0x0C,0x78,0x00, 0x00, 0x00,
	0x01,0x80,0x30,0x06,0x38,0x00, 0x00, 0x00,
	0x03,0x00,0x38,0x03,0x7C,0x00, 0x00, 0x00,
	0x03,0x00,0x18,0x01,0xC6,0x00, 0x00, 0x00,
	0x76,0x00,0x0C,0x00,0x03,0x00, 0x00, 0x00,
	0x3C,0x00,0x06,0x00,0x01,0x80, 0x00, 0x00,
	0x00,0x00,0x03,0x00,0x00,0xC0, 0x00, 0x00,
	0x00,0x00,0x01,0xC0,0x00,0x70, 0x00, 0x00,
	0x00,0x00,0x00,0xE0,0x00,0x38, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
	0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00,
   };
		#endregion

		static readonly Color[] ColorTable = new Color[5] { Color.GreenYellow, Color.FromArgb(0, 127, 127), Color.Blue, Color.FromArgb(96, 160, 0), Color.Red };
		static readonly byte[][] horsedata = new byte[5][] { horsedata1, horsedata2, horsedata3, horsedata4, horsedata5 };

		public const int menuAboutID = 1001;
		public const int menuCenterID = 1002;

		/// <summary>
		/// Initializes a new instance of the <see cref="frmHorse"/> class.
		/// </summary>
		public frmHorse()
		{
			InitializeComponent();
			Init();
		}

		Bitmap[] bmps = new Bitmap[5];
		System.Threading.Semaphore Sema;
		int InstNum;

		/// <summary>
		/// Inits this instance.
		/// </summary>
		private void Init()
		{
			Sema = new System.Threading.Semaphore(0, 100, "Horse");
			InstNum = Sema.Release(1);

			// Initialize unmanged memory to hold the array.
			int size = Marshal.SizeOf(horsedata[0][0]) * horsedata[0].Length;
			for (int i = 0; i < horsedata.Length; ++i)
			{
				IntPtr pnt = Marshal.AllocHGlobal(size);
				Marshal.Copy(horsedata[i], 0, pnt, size);

				Bitmap bmp = new Bitmap(64, 29, 8, PixelFormat.Format1bppIndexed, pnt);
				ColorPalette cp = bmp.Palette;
				cp.Entries[0] = ColorTable[InstNum & 3];
				cp.Entries[1] = Color.Black;
				bmp.Palette = cp;
				bmps[i] = bmp;
			}

			timer1.Enabled = true;
			this.BackColor = ColorTable[InstNum % ColorTable.Length];
			IntPtr SysMenu = Win32Api.GetSystemMenu(this.Handle, false);
			Win32Api.AppendMenu(SysMenu, Win32Api.MenuFlags.MF_SEPARATOR, 0, null);
			Win32Api.AppendMenu(SysMenu, Win32Api.MenuFlags.MF_STRING, menuCenterID, "&Center");
			Win32Api.AppendMenu(SysMenu, Win32Api.MenuFlags.MF_STRING, menuAboutID, "&About...");
		}

		/// <summary>
		/// WNDs the proc.
		/// </summary>
		/// <param name="m">The m.</param>
		protected override void WndProc(ref Message m)
		{
			base.WndProc(ref m);
			
			if (m.Msg == Win32Api.WM_SYSCOMMAND)
			{
				switch (m.WParam.ToInt32())
				{
					case menuAboutID:
						OnAbout(this, null);
						break;

					case menuCenterID:
						this.CenterToScreen();
						break;
				}
			}
		}
		/// <summary>
		/// Called when [about].
		/// </summary>
		/// <param name="sender">The sender.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		private void OnAbout(Object sender, System.EventArgs e)
		{
			About about = new About();
			about.ShowDialog();
		}

		int Index = 0;
		/// <summary>
		/// Handles the Tick event of the timer1 control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		private void timer1_Tick(object sender, EventArgs e)
		{
			pictureBox1.Image = bmps[Index];
			++Index;
			if (Index == 5)
			{
				Index = 0;
			}
		}

		/// <summary>
		/// Handles the FormClosing event of the frmHorse control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.Windows.Forms.FormClosingEventArgs"/> instance containing the event data.</param>
		private void frmHorse_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (InstNum == 0)
			{
				RegistryKey reg = Registry.CurrentUser.CreateSubKey(@"Software\Hyperbolic System\Trotting Horse");
				reg.SetValue("Top", this.Location.Y);
				reg.SetValue("Left", this.Location.X);
				reg.Close();
			}
		}

		/// <summary>
		/// Handles the Load event of the frmHorse control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		private void frmHorse_Load(object sender, EventArgs e)
		{
			if (InstNum == 0)
			{
				this.Text = "Horse";
				RegistryKey reg = Registry.CurrentUser.CreateSubKey(@"Software\Hyperbolic System\Trotting Horse");
				int Y = (int)reg.GetValue("Top", -1);
				int X = (int)reg.GetValue("Left", -1);
				if ((X != -1) && (Y != -1))
				{
					this.Location = new Point(X, Y);
				}
				reg.Close();
			}
			else
			{
				this.Text = String.Format("Horse {0}", InstNum);
			}

			this.MaximumSize = this.Size;
			this.MinimumSize = this.Size;
		}

		/// <summary>
		/// Handles the SizeChanged event of the frmHorse control.
		/// </summary>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
		private void frmHorse_SizeChanged(object sender, EventArgs e)
		{
				timer1.Enabled = (this.WindowState == FormWindowState.Normal);
		}

		private void frmHorse_MouseMove(object sender, MouseEventArgs e)
		{
			if ((int)(e.Button & MouseButtons.Left) != 0 )
				this.Location = this.PointToScreen(e.Location);

			Trace.TraceInformation("Location:{0}, Buttons:{1}", e.Location, e.Button);
		}
	}

	static public class Win32Api
	{
		[DllImport("user32.dll")]
		public static extern IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);

		[Flags]
		public enum MenuFlags : uint
		{
			MF_STRING = 0,
			MF_BYPOSITION = 0x400,
			MF_SEPARATOR = 0x800,
			MF_REMOVE = 0x1000,
		}
		[DllImport("user32.dll", CharSet = CharSet.Auto)]
		public static extern bool AppendMenu(IntPtr hMenu, MenuFlags uFlags, uint uIDNewItem, string lpNewItem);
		public const int WM_SYSCOMMAND = 0x112;
		public const int MF_SEPARATOR = 0x800;
	}
}